p.
  In an interview last week I was asked about the strengths and weaknesses of PHP. Of the latter there are many, of course. I moved my stack to node.js this year and never looked back (JavaScript makes a lot of sense on the server). But that doesn't completely remove PHP from the equation.

p.
  PHP is (unfortunately) still popular, and be it good or not companies have invested talent, time and money in it as a language and ecosystem.

p.
  It's so easy to start writing PHP - it just works. This comes at peril of code quality, of course. PHP code so quickly ends up being a horrible mess of every bit of MVC all at the same time. For example, I wouldn't be surprised to find some lines which output HTML after an inline SQL query to get the data for them. Certainly PHPIPAM is a good (bad!) example of this. Messy.

p.
  You'll always struggle to separate presentation and logic as concerns in PHP. But is it possible to write good PHP code that is actually quite elegant? I think so. You just have to be extremely strict with yourself. This is because PHP is just begging you to write bad procedural code all the time. You have to fight it.

p.
  (This is a general problem with old languages and ecosystems that undergo some change or improvement. A lot of bad example code is still left over in tutorials, forums and of course in production (the worst place). It's good that PHP changed and brought in the OO paradigm, but I would've forked the whole project since it's such a huge proposition.)

p.
  |My &ldquo;best practices&rdquo; PHP code is called &ldquo;Birthday&rdquo; &mdash; it's available 
  a(href="https://github.com/jadaradix/birthday") right here on GitHub
  |.